---

- name: Refresh inventory
  meta: refresh_inventory

- name: Check that you can connect (GET) to Ghost and it returns a status 200
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}:{{ghost_port}}"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 3
  delay: 5

- name: Authenticate (POST) with admin user credentials and it returns a status 201
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}:{{ghost_port}}/ghost/api/admin/session"
    method: POST
    status_code: 201
    body_format: json
    body:
      username: '{{ admin_email }}'
      password: '{{ admin_password }}'
  register: result
  until: result.status == 201
  retries: 3
  delay: 5

- name: Save admin api session
  ansible.builtin.set_fact:
    session_cookies: "{{ result.cookies_string }}"

- name: Get Content Api Key
  community.mysql.mysql_query:
    login_host: '{{ database_ip }}'
    login_port: '{{ database_port }}'
    login_db: '{{ database_name }}'
    login_user: '{{ database_user }}'
    login_password: '{{ database_password }}'
    query: "SELECT secret FROM api_keys WHERE type='content'"
  register: result

- name: Save Content Api Key
  ansible.builtin.set_fact:
    content_api_key: '{{ result.query_result[0][0].secret }}'

- name: Get all posts through the Content Api
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}:{{ghost_port}}/ghost/api/content/posts?key={{ content_api_key }}"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 3
  delay: 5

- name: Verify that only one post exists
  assert:
    that: result.json.meta.pagination.total == 1

- name: Create a Post
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}:{{ghost_port}}/ghost/api/admin/posts"
    method: POST
    status_code: 201
    body_format: json
    body:
      posts:
        - title: "My test post"
          status: "published"
    headers:
      Cookie: "{{ session_cookies }}"
  register: result
  until: result.status == 201
  retries: 3
  delay: 5

- name: Save created post url
  ansible.builtin.set_fact:
    post_location: '{{ result.location }}'

- name: Get all posts through the Content Api
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}:{{ghost_port}}/ghost/api/content/posts?key={{ content_api_key }}"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 3
  delay: 5

- name: Ensure post was created
  assert:
    that: result.json.meta.pagination.total == 2

- name: Delete a Post
  ansible.builtin.uri:
    url: "{{ post_location }}"
    method: DELETE
    status_code: 204
    headers:
      Cookie: "{{ session_cookies }}"
  register: result  
  until: result.status == 204
  retries: 3
  delay: 5

- name: Get all posts through the Content Api
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}:{{ghost_port}}/ghost/api/content/posts?key={{ content_api_key }}"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 3
  delay: 5

- name: Ensure post was deleted
  assert:
    that: result.json.meta.pagination.total == 1